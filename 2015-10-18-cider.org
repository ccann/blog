#+OPTIONS: toc:nil num:nil

#+BEGIN_HTML
---
layout: post
title: CIDER
---
#+END_HTML

[[https://github.com/clojure-emacs/cider][=CIDER=]] is a clojure IDE for emacs.

#+CAPTION: 
#+NAME: 
[[./cider.png]]

CIDER is awesome and provides a lot of really useful utilities for working with
clojure. That said, it took me a while to get comfortable. Together with
=clj-refactor= and =clojure-mode= the host of configuration options and
keybindings can be totally overwhelming. I'll explain my configuration and
workflow below in hopes that it provides a nice starting point.

* Configuration

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
         ("\\.edn\\'" . clojure-mode))
  :init
  (setq cljr-suppress-middleware-warnings t)
  (add-hook 'clojure-mode-hook #'yas-minor-mode)
  (add-hook 'clojure-mode-hook #'linum-mode)
  (add-hook 'clojure-mode-hook #'subword-mode)
  (add-hook 'clojure-mode-hook #'smartparens-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'clojure-mode-hook #'eldoc-mode)
  (add-hook 'clojure-mode-hook #'idle-highlight-mode)
  (use-package slamhound :defer t :ensure t)
  (use-package clj-refactor
    :defer t
    :ensure t
    :diminish clj-refactor-mode
    :config (cljr-add-keybindings-with-prefix "C-c C-m"))  
  (use-package cider-eval-sexp-fu :defer t :ensure t)
  (use-package cider
    :ensure t
    :defer t
    :init
    (add-hook 'cider-mode-hook #'clj-refactor-mode)
    :diminish subword-mode
    :config
    (setq nrepl-log-messages t                   ; log communication with the nREPL server
          cider-repl-display-in-current-window t 
          cider-repl-use-clojure-font-lock t
          cider-prompt-save-file-on-load nil
          cider-font-lock-dynamically '(macro core function var)
          nrepl-hide-special-buffers t            ; hide *nrepl-connection* and *nrepl-server*
          cider-ovelays-use-font-lock t)
    (cider-repl-toggle-pretty-printing)))
#+END_SRC

# [`use-package`](https://github.com/jwiegley/use-package) is a macro for configuring packages in emacs. I use it to configure several packages above. The `clojure-mode` package 

